This is a sandbox where I will test code or rough out a design before implementing it in the codebase.

**These are unorganized design notes not intended for public use.  It's really just me thinking aloud.  Nothin in here is concrete until it is implemented in code (and then it is subject to change).  However, feel free to give me feedback or suggestions on anything you see in here.**

COMPONENTS
>UI logic / Interaction / Validation / Eventing: Javascript
>View: Canvas / SVG / HTML or graphics library
>Server / Email / Save Games / Mult-player / Bots: NodeJS
>Repository / Game log / State / Multicast: FireBase

DESIGN
>Hexagonal / Ports structure
>Model of BoardState (Javascript)
>Game rules engine (Javascript)
>Rendering of Board State to View (Javascript, Canvas)
>Handling of User Interactions (Javascript)
>Server / Repository communication (Javascript, FireBase, NodeJs)
>Server Logic / Bot Handling / Multi-player / Email / Save Games (NodeJs, FireBase)
>App installation on Mobile Devices (PhoneGap, jQuery Mobile)

CONNECTIONS / DEPENDENCIES
Interaction => BoardState / RulesEngine => Event => Rendering
	OR
Interaction => Event => BoardState / RulesEngine => Event => Rendering

Interaction => Server / Repository

DESIGN DECISIONS
2012/07/12
	>Use github for code repository as I've never used it before and wanted to understand it as a tool
2012/07/13
	>Use QUnit for js unit testing for its ease and minimal requirements (1 external css and 1 external js file)
		>Consider Mocha as future alternateive that is better suited for async testing
	>Avoid use of mouse hover or other web idioms that would make it difficult to translate to mobile platform
2012/07/17
	>Arimaa notation varies, so use internal representation of piece (i.e. Piece) and position (i.e. square) and translate from/to Arimaa notation(s) (e.g. Hg3n) as needed.
2012/08/03
	>Must demonstrate game can run
		>With ui, driven by user interaction (specification, boardstate, ruleEngine, render, interactions)
		>With ui, driven by log file of moves (specification, boardstate, ruleEngine, render)
		>Without ui, driven by log file of moves (specification, boardstate, ruleEngine)
	>Design so that rendering method (e.g. canvas, svg) can be swapped with no impact except changing to alternate render js file
2012/08/04
	>Render, interactions, action should generate and receive events.
	>Action should receive events (from Interaction or LogReader) but generate messages (i.e. direct function calls) to ruleEngine.
		>Action should generate messages to interaction or render where appropriate (e.g. kill trapped piece)
	>LogWriter should recieve events (from Interaction or LogReader) but generate log string.
	>LogReader should recieve a list of moves and generate events that Action listens for.

QUESTIONS / ISSUES
Use revealing module pattern with/without constructors?
Use requireJs or LabJs?
Use async.js?
Use Underscore.js?
Use namespace or modules or sandbox pattern?
How to unit test interactions? Qunit
How to unit test rendering? 
What is best way to represent board and board state?
What events / interface for the interactions, board, render to raise/expose?
Use webworkers to handle processing of bot move calculation?
Refactor
	>Remove sprite management from render.js and create a sprite manager; takes sprite specification that defines image file path and positions of each sprite
>How to create a serializable event stream to allow undo/redo functionality for each board move
>Should renderer conceal entirely the details of the render surface (e.g. canvas, svg, etc) and only expose pure arimaa events for click and other things? Yes.
>Should interactions specify the render action?

MILESTONES
!Render board and pieces
!Capture mouse click on board square and report location
!Refactor to remove inline javascript with js files using revealing module pattern
!Get unit test harness working
!Raise interaction events based on mouse click
!Separate image loading from render module
!Create boardSpecification json
!On click highlight square
!On highlight, preserve sprite on square
!Use TDD to rough out boardState features
!On click of highlighted square, remove highlight
!On click of alternate square, remove highlight from prior square
On lowlight, preserve sprite on square
On lowlight, restore prior color to square


GAME STATE VALIDATIONS
GameStateInvalid = "The Game state is invalid."; 
MoveObjectInvalid = "The Move object is invalid."; 
OutOfTurn = "It is not your turn to move."; 
CannotMoveEnemyPiece = "You cannot move this enemy piece."; 
InvalidStartPosition = "The intended start position of this piece is invalid."; 
PieceNotFound = "The indicated piece was null or not found."; 
OriginSquareNotFound = "The origin square of the move was null or not found."; 
DestinationSquareNotFound = "The destination square of the move was null or not found."; 
OriginSquareIncorrect = "The residing square of the piece did not agree with the origin square of the move."; 
SquaresNotAdjacent = "The origin and destination squares are not adjacent."; 
DestinationSquareOccupied = "The destination square is currently occupied."; 
InsufficientMovesRemaining = "Not enough moves remaining in turn to complete this move."; 
MustFollowThroughOnPush = "You must follow through on the in-progress push by moving into the square vacated by the enemy piece."; 
PieceFrozen = "The piece you are attempting to move is frozen in place by an adjacent enemy piece."; 
PieceTypeMovementRestricted = "The piece you are attempting to move is not allowed to move in that direction."; 
CannotPushEnemyPieceWithThisPiece = "You cannot follow through on the push with this piece, because it is too weak."; 
NoAdjacentPiecesCanPushThisPiece = "There are no adjacent pieces capable of pushing the enemy piece that you are trying to move."; 
AllAdjacentPiecesForPushingAreFrozen = "All adjacent pieces capable of pushing this piece are currently frozen."; 
CannotRepeatPreviousBoardPosition = "You cannot make this move because it would repeat a previous board position an illegal number of times."; 
MustChangeBoardPosition = "You cannot make this move because it would duplicate the board position from the beginning of your turn."; 